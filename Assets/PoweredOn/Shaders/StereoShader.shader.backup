Shader "Custom/ParallaxShift" {
    Properties{
        _MainTex("Texture", 2D) = "white" {}
    }

        SubShader{
            Tags { "RenderType" = "Opaque" }
            LOD 100

            Pass {
                Name "ParallaxShift"
                Tags { "LightMode" = "ForwardBase" }

                CGPROGRAM
                #pragma target 3.0
                #pragma vertex vert
                #pragma fragment frag
                #pragma multi_compile_instancing
                #pragma multi_compile_view
                #include "UnityCG.cginc"

                struct appdata {
                    float4 vertex : POSITION;
                    float2 uv : TEXCOORD0;
                };

                struct v2f {
                    float2 uv : TEXCOORD0;
                    float4 vertex : SV_POSITION;
                };

                sampler2D _MainTex;

                float4 _MainTex_ST;

                v2f vert(appdata v) {
                    v2f o;
                    o.vertex = UnityObjectToClipPos(v.vertex);
                    o.uv = TRANSFORM_TEX(v.uv, _MainTex);
                    return o;
                }

                float4 frag(v2f i) : SV_Target {
                    float2 uv = i.uv;

                    // Get the view projection matrix for the current eye
                    float4x4 viewProj = UnityGetMatrix(UNITY_MATRIX_VP, UNITY_Eye(UNITY_CurrentViewID));

                    // Calculate the position of the current pixel in world space
                    float3 worldPos = mul(viewProj, float4(i.vertex.xyz, 1.0)).xyz;

                    // Shift the UV based on the position in world space
                    uv.x += worldPos.z * 0.05;

                    if (UNITY_CurrentViewID == 1) {
                        // red
                        return float4(1.0, 0.0, 0.0, 1.0);
                    }
                    else {
                        // blue
                        return float4(0.0, 0.0, 1.0, 1.0);
                    }

                    // Sample the texture using the modified UV
                    float4 color = tex2D(_MainTex, uv);

                    return color;
                }
                ENDCG
            }
    }
        FallBack "Diffuse"
}